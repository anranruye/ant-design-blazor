@namespace AntDesign
@typeparam TItem
@implements IDisposable
@using AntDesign.TableModels

<CascadingValue Value="_rowData" Name="RowData" ChildContent="ChildContent(_rowData)" />

@code {
    [CascadingParameter(Name = "RowData")]
    public RowData<TItem> ParentRowData { get; set; }

    [Parameter]
    public ITable<TItem> Table { get; set; }

    [Parameter]
    public int RowIndex { get; set; }

    [Parameter]
    public int PageIndex { get; set; }

    [Parameter]
    public bool Selected { get; set; }

    [Parameter]
    public bool Expanded { get; set; }

    [Parameter]
    public int Level { get; set; }

    [Parameter]
    public bool HasChildren { get; set; }

    [Parameter]
    public TItem Data { get; set; }

    [Parameter]
    public RenderFragment<RowData<TItem>> ChildContent { get; set; }

    [Parameter]
    public Action<RowData<TItem>, bool> RowDataSelectedChanged { get; set; }

    [Parameter]
    public Action<RowData<TItem>, bool> RowDataExpandedChanged { get; set; }

    private RowData<TItem> _rowData;

    protected override void OnInitialized()
    {
        _rowData = new RowData<TItem>();
        _rowData.Data = Data;
        _rowData.SelectedChanged += OnRowDataSelectedChanged;
        _rowData.ExpandedChanged += OnRowDataExpandedChanged;
        _rowData.Level = Level;
        if (ParentRowData != null)
        {
            _rowData.Parent = ParentRowData;
        }
        Table.RowDatas.Add(_rowData);
    }

    protected override void OnParametersSet()
    {
        _rowData.HasChildren = HasChildren;
        _rowData.PageIndex = PageIndex;
        _rowData.RowIndex = RowIndex;
        _rowData.SetSelected(Selected);
        _rowData.SetExpanded(Expanded);
    }

    private void OnRowDataSelectedChanged(RowData rowData, bool selected)
    {
        RowDataSelectedChanged?.Invoke(rowData as RowData<TItem>, selected);
        InvokeAsync(StateHasChanged);
    }

    private void OnRowDataExpandedChanged(RowData rowData, bool selected)
    {
        RowDataExpandedChanged?.Invoke(rowData as RowData<TItem>, selected);
        InvokeAsync(StateHasChanged);
    }

    void IDisposable.Dispose()
    {
        _rowData.SelectedChanged -= OnRowDataSelectedChanged;
        _rowData.ExpandedChanged -= OnRowDataExpandedChanged;
        Table.RowDatas.Remove(_rowData);
    }
}
