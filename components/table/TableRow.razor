@namespace AntDesign
@inherits AntDomComponentBase
@implements ITableRow
@typeparam TItem
@using AntDesign.TableModels

@if (IsBody)
{
    <CascadingValue Value="_blockColumns" Name="AntDesign.Column.Blocked">
        <tr @attributes="RowAttributes"
            data-row-key="@(RowData.RowIndex-1)" class="ant-table-row ant-table-row-level-@RowData.Level @(RowData.Selected ? "ant-table-row-selected" : "") @RowClassName @RowAttributes?.GetValueOrDefault("class")">
            <CascadingValue Name="AntDesign.Selection.OnChange"
                            Value="EventCallback.Factory.Create<bool>(this, OnSelectionChange)">
                <CascadingValue Value="this" TValue="ITableRow" Name="AntDesign.Selection.TableRow" IsFixed>
                    @ChildContent
                </CascadingValue>
            </CascadingValue>
        </tr>
    </CascadingValue>
}
else if (IsHeader)
{
    <tr @attributes="RowAttributes">
        <CascadingValue Name="AntDesign.Selection.OnChange"
                        Value="EventCallback.Factory.Create<bool>(this, OnSelectionChange)">
                @ChildContent
        </CascadingValue>
    </tr>
}

@{ _blockColumns = false; }

@code {
    bool _blockColumns = false;

    [CascadingParameter(Name = "AntDesign.TableRow.Table")]
    public ITable Table { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [CascadingParameter(Name = "IsHeader")]
    public bool IsHeader { get; set; }

    [CascadingParameter(Name = "IsBody")]
    public bool IsBody { get; set; }

    [CascadingParameter(Name = "RowData")]
    public RowData<TItem> RowData { get; set; }

    [CascadingParameter(Name = "AntDesign.TableRow.RowIndexOfCurrentPage")]
    public int RowIndexOfCurrentPage { get; set; }

    [CascadingParameter(Name = "AntDesign.TableRow.Data")]
    public TItem Data { get; set; }

    [CascadingParameter(Name = "AntDesign.TableRow.Selected")]
    public bool Selected { get; set; }

    [CascadingParameter(Name = "AntDesign.TableRow.Expanded")]
    public bool Expanded { get; set; }

    [CascadingParameter(Name = "AntDesign.TableRow.RowAttributes")]
    public Dictionary<string, object> RowAttributes { get; set; }

    [CascadingParameter(Name = "AntDesign.TableRow.RowClassName")]
    public string RowClassName { get; set; }

    public Selection Selection { get; set; }

    private void OnSelectionChange(bool selected)
    {
        if (IsHeader)
        {
            if (selected)
            {
                Table.SelectAll();
            }
            else
            {
                Table.UnselectAll();
            }
        }
        else if (IsBody)
        {
            if (Selection.Type == "radio")
            {
                Table.SetSelection(new[] { Selection.Key });
            }
            else
            {
                RowData.Selected = selected;
                Table.Selection.StateHasChanged();
            }
        }
    }

    private async void RowDataSelectedChanged(RowData rowData, bool selected)
    {
        _blockColumns = true;
        await InvokeAsync(StateHasChanged);
    }

    protected override void OnInitialized()
    {
        if (RowData != null)
        {
            RowData.SelectedChanged += RowDataSelectedChanged;
        }
        base.OnInitialized();
    }

    protected override void Dispose(bool disposing)
    {
        if (RowData != null)
        {
            RowData.SelectedChanged -= RowDataSelectedChanged;
        }
        base.Dispose(disposing);
    }
}
